<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration SYSTEM "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration> <!--  ROOT TAG -->
	<session-factory> <!-- Configuration details for session factory objects -->
		<!-- Configuring the database -->
		<!-- This i like he jdbc class.forName() -->
		<property name="hibernate.connection.driver_class">
			oracle.jdbc.OracleDriver
		</property>
		
		<!-- Configures the database engine we intend to use -->
		<!-- If you ever change languages, this property must change as well-->
		<property name="hibernate.dialect">
			org.hibernate.dialect.Oracle10gDialect
		</property>
		
		<!-- Typical JDBC url requirement -->
		<property name="hibernate.connection.url">
			jdbc:oracle:thin:@localhost:1521:xe
		</property>
		
		<property name="hibernate.connection.username">
			Animals
		</property>
		<property name="hibernate.connection.password">
			animals
		</property>
		
		<!-- This determines how many connections a single user can have o the database.
		Allowing for multiple connections allows for concurrent, and therefore faster, database
		interaction. 
		However, you can quickly reach the database cap in AWS if you let each user have a large
		amount of connections.
		Max for AWS is 50.  For free if hit that your EC2 will shut down -->
		<property name="hibernate.connection.pool_size">5</property>
		
		<!-- Shows sql queries that hibernate is using behind the scenes for us to see -->
		<property name="show_sql">true</property>
		<!--  There are 4 different states you can place it as:
			update: perform Hibernate actions on an existing database
			create: wipe any existing database tables, and create them from scratch as needed
			validate: creates the schema, destorying old data
			create_drop: database is cleared and emptied upon server shutdown -->
		<property name="hibernate.hbm2ddl.auto">create</property>
		
		<!-- <mapping resource="food.hbm.xml"/> -->
		<mapping class="com.revature.beans.Food"/>
		<mapping class="com.revature.beans.Bear"/>
		<mapping class="com.revature.beans.Cave"/>
		<mapping class="com.revature.beans.HoneyPot"/>
	</session-factory>
</hibernate-configuration>